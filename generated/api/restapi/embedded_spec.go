// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Project Nommies API",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "host": "not.implemented.io",
  "basePath": "/v1",
  "paths": {
    "/recipes": {
      "get": {
        "tags": [
          "recipes"
        ],
        "summary": "List all recipes",
        "operationId": "listRecipes",
        "parameters": [
          {
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "description": "How many items to return at one time (min 1)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "How many items to skip",
            "name": "offset",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "Sort order:\n * asc - Ascending, from A to Z.\n * desc - Descending, from Z to A.\n",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe response object containing list of recipes",
            "schema": {
              "$ref": "#/definitions/ListRecipesResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ListRecipesResponse": {
      "type": "object",
      "properties": {
        "next": {
          "description": "Url to next page. Empty if no additional pages.",
          "type": "string"
        },
        "recipes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Recipes"
          }
        }
      }
    },
    "Recipe": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "category": {
          "description": "List of categories this recipe belongs to.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "description": "Unique recipe ID.",
          "type": "integer",
          "format": "int64"
        },
        "imageUrl": {
          "description": "URL for display image of recipe.",
          "type": "string"
        },
        "name": {
          "description": "Name of recipe.",
          "type": "string"
        },
        "recipeUrl": {
          "description": "Direct URL to recipe.",
          "type": "string"
        }
      }
    },
    "Recipes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Recipe"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Project Nommies API",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "host": "not.implemented.io",
  "basePath": "/v1",
  "paths": {
    "/recipes": {
      "get": {
        "tags": [
          "recipes"
        ],
        "summary": "List all recipes",
        "operationId": "listRecipes",
        "parameters": [
          {
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "description": "How many items to return at one time (min 1)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "How many items to skip",
            "name": "offset",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "Sort order:\n * asc - Ascending, from A to Z.\n * desc - Descending, from Z to A.\n",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe response object containing list of recipes",
            "schema": {
              "$ref": "#/definitions/ListRecipesResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ListRecipesResponse": {
      "type": "object",
      "properties": {
        "next": {
          "description": "Url to next page. Empty if no additional pages.",
          "type": "string"
        },
        "recipes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Recipes"
          }
        }
      }
    },
    "Recipe": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "category": {
          "description": "List of categories this recipe belongs to.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "description": "Unique recipe ID.",
          "type": "integer",
          "format": "int64"
        },
        "imageUrl": {
          "description": "URL for display image of recipe.",
          "type": "string"
        },
        "name": {
          "description": "Name of recipe.",
          "type": "string"
        },
        "recipeUrl": {
          "description": "Direct URL to recipe.",
          "type": "string"
        }
      }
    },
    "Recipes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Recipe"
      }
    }
  }
}`))
}

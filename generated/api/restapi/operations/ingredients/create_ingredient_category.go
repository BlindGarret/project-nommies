// Code generated by go-swagger; DO NOT EDIT.

package ingredients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateIngredientCategoryHandlerFunc turns a function with the right signature into a create ingredient category handler
type CreateIngredientCategoryHandlerFunc func(CreateIngredientCategoryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateIngredientCategoryHandlerFunc) Handle(params CreateIngredientCategoryParams) middleware.Responder {
	return fn(params)
}

// CreateIngredientCategoryHandler interface for that can handle valid create ingredient category params
type CreateIngredientCategoryHandler interface {
	Handle(CreateIngredientCategoryParams) middleware.Responder
}

// NewCreateIngredientCategory creates a new http.Handler for the create ingredient category operation
func NewCreateIngredientCategory(ctx *middleware.Context, handler CreateIngredientCategoryHandler) *CreateIngredientCategory {
	return &CreateIngredientCategory{Context: ctx, Handler: handler}
}

/* CreateIngredientCategory swagger:route PUT /ingredientCategories/{id} ingredients createIngredientCategory

Creates an ingredient category

*/
type CreateIngredientCategory struct {
	Context *middleware.Context
	Handler CreateIngredientCategoryHandler
}

func (o *CreateIngredientCategory) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateIngredientCategoryParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

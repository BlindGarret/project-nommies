// Code generated by go-swagger; DO NOT EDIT.

package ingredients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/BlindGarret/project-nommies/generated/api/models"
)

// CreateIngredientCategoryOKCode is the HTTP code returned for type CreateIngredientCategoryOK
const CreateIngredientCategoryOKCode int = 200

/*CreateIngredientCategoryOK Response when model has been updated within the data collection

swagger:response createIngredientCategoryOK
*/
type CreateIngredientCategoryOK struct {
}

// NewCreateIngredientCategoryOK creates CreateIngredientCategoryOK with default headers values
func NewCreateIngredientCategoryOK() *CreateIngredientCategoryOK {

	return &CreateIngredientCategoryOK{}
}

// WriteResponse to the client
func (o *CreateIngredientCategoryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// CreateIngredientCategoryCreatedCode is the HTTP code returned for type CreateIngredientCategoryCreated
const CreateIngredientCategoryCreatedCode int = 201

/*CreateIngredientCategoryCreated Response when model is added to the data collection

swagger:response createIngredientCategoryCreated
*/
type CreateIngredientCategoryCreated struct {
	/*Location of created model.

	 */
	Location string `json:"Location"`
}

// NewCreateIngredientCategoryCreated creates CreateIngredientCategoryCreated with default headers values
func NewCreateIngredientCategoryCreated() *CreateIngredientCategoryCreated {

	return &CreateIngredientCategoryCreated{}
}

// WithLocation adds the location to the create ingredient category created response
func (o *CreateIngredientCategoryCreated) WithLocation(location string) *CreateIngredientCategoryCreated {
	o.Location = location
	return o
}

// SetLocation sets the location to the create ingredient category created response
func (o *CreateIngredientCategoryCreated) SetLocation(location string) {
	o.Location = location
}

// WriteResponse to the client
func (o *CreateIngredientCategoryCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Location

	location := o.Location
	if location != "" {
		rw.Header().Set("Location", location)
	}

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

/*CreateIngredientCategoryDefault unexpected error

swagger:response createIngredientCategoryDefault
*/
type CreateIngredientCategoryDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateIngredientCategoryDefault creates CreateIngredientCategoryDefault with default headers values
func NewCreateIngredientCategoryDefault(code int) *CreateIngredientCategoryDefault {
	if code <= 0 {
		code = 500
	}

	return &CreateIngredientCategoryDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the create ingredient category default response
func (o *CreateIngredientCategoryDefault) WithStatusCode(code int) *CreateIngredientCategoryDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the create ingredient category default response
func (o *CreateIngredientCategoryDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the create ingredient category default response
func (o *CreateIngredientCategoryDefault) WithPayload(payload *models.Error) *CreateIngredientCategoryDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create ingredient category default response
func (o *CreateIngredientCategoryDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateIngredientCategoryDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Code generated by go-swagger; DO NOT EDIT.

package ingredients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/BlindGarret/project-nommies/generated/api/models"
)

// ListIngredientsHandlerFunc turns a function with the right signature into a list ingredients handler
type ListIngredientsHandlerFunc func(ListIngredientsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListIngredientsHandlerFunc) Handle(params ListIngredientsParams) middleware.Responder {
	return fn(params)
}

// ListIngredientsHandler interface for that can handle valid list ingredients params
type ListIngredientsHandler interface {
	Handle(ListIngredientsParams) middleware.Responder
}

// NewListIngredients creates a new http.Handler for the list ingredients operation
func NewListIngredients(ctx *middleware.Context, handler ListIngredientsHandler) *ListIngredients {
	return &ListIngredients{Context: ctx, Handler: handler}
}

/* ListIngredients swagger:route GET /ingredients ingredients listIngredients

List all ingredients

*/
type ListIngredients struct {
	Context *middleware.Context
	Handler ListIngredientsHandler
}

func (o *ListIngredients) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListIngredientsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ListIngredientsOKBody list ingredients o k body
//
// swagger:model ListIngredientsOKBody
type ListIngredientsOKBody struct {

	// Url to next page. Empty if no additional pages.
	Next string `json:"next,omitempty"`

	// recipes
	Recipes []*models.SmallIngredient `json:"recipes"`
}

// Validate validates this list ingredients o k body
func (o *ListIngredientsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRecipes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListIngredientsOKBody) validateRecipes(formats strfmt.Registry) error {
	if swag.IsZero(o.Recipes) { // not required
		return nil
	}

	for i := 0; i < len(o.Recipes); i++ {
		if swag.IsZero(o.Recipes[i]) { // not required
			continue
		}

		if o.Recipes[i] != nil {
			if err := o.Recipes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listIngredientsOK" + "." + "recipes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list ingredients o k body based on the context it is used
func (o *ListIngredientsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRecipes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListIngredientsOKBody) contextValidateRecipes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Recipes); i++ {

		if o.Recipes[i] != nil {
			if err := o.Recipes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listIngredientsOK" + "." + "recipes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListIngredientsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListIngredientsOKBody) UnmarshalBinary(b []byte) error {
	var res ListIngredientsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package recipes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListRecipesHandlerFunc turns a function with the right signature into a list recipes handler
type ListRecipesHandlerFunc func(ListRecipesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListRecipesHandlerFunc) Handle(params ListRecipesParams) middleware.Responder {
	return fn(params)
}

// ListRecipesHandler interface for that can handle valid list recipes params
type ListRecipesHandler interface {
	Handle(ListRecipesParams) middleware.Responder
}

// NewListRecipes creates a new http.Handler for the list recipes operation
func NewListRecipes(ctx *middleware.Context, handler ListRecipesHandler) *ListRecipes {
	return &ListRecipes{Context: ctx, Handler: handler}
}

/* ListRecipes swagger:route GET /recipes recipes listRecipes

List all recipes

*/
type ListRecipes struct {
	Context *middleware.Context
	Handler ListRecipesHandler
}

func (o *ListRecipes) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListRecipesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

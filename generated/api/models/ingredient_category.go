// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IngredientCategory ingredient category
//
// swagger:model IngredientCategory
type IngredientCategory struct {
	IngredientCategoryCreationModel

	IngredientCategoryAllOf1

	// Category name/id.
	ID string `json:"id,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IngredientCategory) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 IngredientCategoryCreationModel
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.IngredientCategoryCreationModel = aO0

	// AO1
	var aO1 IngredientCategoryAllOf1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.IngredientCategoryAllOf1 = aO1

	// AO2
	var dataAO2 struct {
		ID string `json:"id,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	m.ID = dataAO2.ID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IngredientCategory) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.IngredientCategoryCreationModel)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.IngredientCategoryAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	var dataAO2 struct {
		ID string `json:"id,omitempty"`
	}

	dataAO2.ID = m.ID

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this ingredient category
func (m *IngredientCategory) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with IngredientCategoryCreationModel
	if err := m.IngredientCategoryCreationModel.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with IngredientCategoryAllOf1

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this ingredient category based on the context it is used
func (m *IngredientCategory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with IngredientCategoryCreationModel
	if err := m.IngredientCategoryCreationModel.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with IngredientCategoryAllOf1

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *IngredientCategory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngredientCategory) UnmarshalBinary(b []byte) error {
	var res IngredientCategory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IngredientCategoryAllOf1 ingredient category all of1
//
// swagger:model IngredientCategoryAllOf1
type IngredientCategoryAllOf1 interface{}
